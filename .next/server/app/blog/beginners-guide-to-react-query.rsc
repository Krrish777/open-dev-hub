2:I[5250,["250","static/chunks/250-27d9df3c9d800d4f.js","841","static/chunks/841-443d37396908e6ae.js","398","static/chunks/app/blog/beginners-guide-to-react-query/page-137319256c945e57.js"],""]
3:I[3657,["250","static/chunks/250-27d9df3c9d800d4f.js","841","static/chunks/841-443d37396908e6ae.js","398","static/chunks/app/blog/beginners-guide-to-react-query/page-137319256c945e57.js"],""]
6:I[5613,[],""]
7:I[1778,[],""]
8:I[5935,["250","static/chunks/250-27d9df3c9d800d4f.js","267","static/chunks/267-a1a1af464538ce0f.js","288","static/chunks/288-b6c041c6203062d2.js","185","static/chunks/app/layout-5b5b1b0099240a15.js"],""]
9:I[258,["250","static/chunks/250-27d9df3c9d800d4f.js","267","static/chunks/267-a1a1af464538ce0f.js","288","static/chunks/288-b6c041c6203062d2.js","185","static/chunks/app/layout-5b5b1b0099240a15.js"],""]
c:I[207,["250","static/chunks/250-27d9df3c9d800d4f.js","267","static/chunks/267-a1a1af464538ce0f.js","288","static/chunks/288-b6c041c6203062d2.js","185","static/chunks/app/layout-5b5b1b0099240a15.js"],""]
d:I[4621,["250","static/chunks/250-27d9df3c9d800d4f.js","267","static/chunks/267-a1a1af464538ce0f.js","288","static/chunks/288-b6c041c6203062d2.js","185","static/chunks/app/layout-5b5b1b0099240a15.js"],"Toaster"]
e:I[4274,["250","static/chunks/250-27d9df3c9d800d4f.js","267","static/chunks/267-a1a1af464538ce0f.js","288","static/chunks/288-b6c041c6203062d2.js","185","static/chunks/app/layout-5b5b1b0099240a15.js"],"Analytics"]
f:I[1255,["250","static/chunks/250-27d9df3c9d800d4f.js","267","static/chunks/267-a1a1af464538ce0f.js","288","static/chunks/288-b6c041c6203062d2.js","185","static/chunks/app/layout-5b5b1b0099240a15.js"],"SpeedInsights"]
4:T448,import React, { useState } from "react";
import { useMutation } from "react-query";
import axios from "axios";

const CreatePost = () => {
  const [title, setTitle] = useState("");
  const [body, setBody] = useState("");

  const mutation = useMutation((newPost) =>
    axios.post("https://jsonplaceholder.typicode.com/posts", newPost)
  );

  const submitData = () => {
    mutation.mutate({ title, body });
  };

  if (mutation.isLoading) {
    return <span>Submitting...</span>;
  }

  if (mutation.isError) {
    return <span>Error: {mutation.error.message}</span>;
  }

  if (mutation.isSuccess) {
    return <span>Post submitted!</span>;
  }

  return (
    <div>
      <input
        type="text"
        value={title}
        onChange={(e) => setTitle(e.target.value)}
        placeholder="Title"
      />
      <input
        type="text"
        value={body}
        onChange={(e) => setBody(e.target.value)}
        placeholder="Body"
      />
      <button onClick={submitData}>Submit</button>
    </div>
  );
};
export default CreatePost;
5:T44f,import React, { useState } from "react";
import { useMutation } from "react-query";
import axios from "axios";

const UpdatePost = () => {
  const [title, setTitle] = useState("");
  const [body, setBody] = useState("");

  const mutation = useMutation((updatedPost) =>
    axios.put("https://jsonplaceholder.typicode.com/posts/1", updatedPost)
  );

  const submitData = () => {
    mutation.mutate({ title, body });
  };

  if (mutation.isLoading) {
    return <span>Updating...</span>;
  }

  if (mutation.isError) {
    return <span>Error: {mutation.error.message}</span>;
  }

  if (mutation.isSuccess) {
    return <span>Post updated!</span>;
  }

  return (
    <div>
      <input
        type="text"
        value={title}
        onChange={(e) => setTitle(e.target.value)}
        placeholder="Title"
      />
      <input
        type="text"
        value={body}
        onChange={(e) => setBody(e.target.value)}
        placeholder="Body"
      />
      <button onClick={submitData}>Update</button>
    </div>
  );
};

export default UpdatePost;
a:T518,M165.9 397.4c0 2-2.3 3.6-5.2 3.6-3.3.3-5.6-1.3-5.6-3.6 0-2 2.3-3.6 5.2-3.6 3-.3 5.6 1.3 5.6 3.6zm-31.1-4.5c-.7 2 1.3 4.3 4.3 4.9 2.6 1 5.6 0 6.2-2s-1.3-4.3-4.3-5.2c-2.6-.7-5.5.3-6.2 2.3zm44.2-1.7c-2.9.7-4.9 2.6-4.6 4.9.3 2 2.9 3.3 5.9 2.6 2.9-.7 4.9-2.6 4.6-4.6-.3-1.9-3-3.2-5.9-2.9zM244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 20-5.6 41.5-8.5 62.8-8.5s42.8 2.9 62.8 8.5c0 0 48.1-33.6 69-27 13.7 34.7 5.2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8zM97.2 352.9c-1.3 1-1 3.3.7 5.2 1.6 1.6 3.9 2.3 5.2 1 1.3-1 1-3.3-.7-5.2-1.6-1.6-3.9-2.3-5.2-1zm-10.8-8.1c-.7 1.3.3 2.9 2.3 3.9 1.6 1 3.6.7 4.3-.7.7-1.3-.3-2.9-2.3-3.9-2-.6-3.6-.3-4.3.7zm32.4 35.6c-1.6 1.3-1 4.3 1.3 6.2 2.3 2.3 5.2 2.6 6.5 1 1.3-1.3.7-4.3-1.3-6.2-2.2-2.3-5.2-2.6-6.5-1zm-11.4-14.7c-1.6 1-1.6 3.6 0 5.9 1.6 2.3 4.3 3.3 5.6 2.3 1.6-1.3 1.6-3.9 0-6.2-1.4-2.3-4-3.3-5.6-2z0:["x_tLr0vZiQSfrSC7h6Eiy",[[["",{"children":["blog",{"children":["beginners-guide-to-react-query",{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",{"children":["blog",{"children":["beginners-guide-to-react-query",{"children":["__PAGE__",{},["$L1",[["$","p",null,{"className":"text-base my-4 text-gray-400","children":["$","$L2",null,{"className":"underline my-4","href":"/blog","children":"Back"}]}],"\n",["$","p",null,{"className":"text-base my-4 text-gray-400","children":["$","div",null,{"className":"border border-border p-2 bg-secondary rounded-xl my-4","children":["$","$L3",null,{"src":"https://cdn.hashnode.com/res/hashnode/image/upload/v1696593803590/d7d4de23-29d0-4c07-9ad2-00dc3c66d662.png?w=1600&h=840&fit=crop&crop=entropy&auto=compress,format&format=webp","alt":"Banner","width":"$undefined","height":"$undefined","className":"rounded-xl"}]}]}],"\n",["$","h1",null,{"className":"md:text-4xl text-3xl font-bold my-8 text-gray-200 text-center","children":"Beginner's Guide to React Query"}],"\n",["$","h3",null,{"className":"md:text-2xl text-xl font-bold my-4 text-gray-200","children":"Introduction"}],"\n",["$","p",null,{"className":"text-base my-4 text-gray-400","children":"Step into the world of web development, where loading server data, handling errors, and keeping clients and servers in sync are all part of the exciting puzzle. But wait, there's more! Picture a scenario where poor internet connections add another layer of complexity. It's enough to make any developer's head spin."}],"\n",["$","p",null,{"className":"text-base my-4 text-gray-400","children":"Now, imagine a solution that takes these challenges and turns them into a breeze. React Query as a solution helps in caching and server state management. Whether you're a seasoned developer or just starting your coding journey, React Query is a great option to try."}],"\n",["$","h4",null,{"className":"md:text-xl text-xl font-bold my-3 text-gray-200","children":"Article Objective"}],"\n",["$","p",null,{"className":"text-base my-4 text-gray-400","children":"This beginner's guide aims to introduce you to React Query, its core concepts, and how to use it effectively in your projects. Whether you are new to React or an experienced developer looking to enhance your data fetching capabilities, this guide will provide you with a solid foundation to get started with React Query."}],"\n",["$","h4",null,{"className":"md:text-xl text-xl font-bold my-3 text-gray-200","children":"Prerequisite"}],"\n",["$","p",null,{"className":"text-base my-4 text-gray-400","children":"Certain requirements must be met to follow up on this article;"}],"\n",["$","ul",null,{"className":"list-disc pl-5 my-4 text-gray-400","children":["\n",["$","li",null,{"className":"ml-2 text-gray-400","children":["\n",["$","p",null,{"className":"text-base my-4 text-gray-400","children":"Comprehension of JavaScript syntax"}],"\n"]}],"\n",["$","li",null,{"className":"ml-2 text-gray-400","children":["\n",["$","p",null,{"className":"text-base my-4 text-gray-400","children":"Basic knowledge of the React.js framework"}],"\n"]}],"\n",["$","li",null,{"className":"ml-2 text-gray-400","children":["\n",["$","p",null,{"className":"text-base my-4 text-gray-400","children":"Understanding of APIs"}],"\n"]}],"\n",["$","li",null,{"className":"ml-2 text-gray-400","children":["\n",["$","p",null,{"className":"text-base my-4 text-gray-400","children":"React Query and Axios Installed on your computer"}],"\n"]}],"\n"]}],"\n",["$","p",null,{"className":"text-base my-4 text-gray-400","children":"In the course of this article, we used Jsonplaceholder as our API endpoint, React Query and Axios to fetch, and handle server state data; below is a demonstration of how to install and set up React Query."}],"\n",["$","p",null,{"className":"text-base my-4 text-gray-400","children":"Navigate to a React project and run the following in your terminal:"}],"\n",["$","div",null,{"className":"p-4 my-4 rounded-xl text-gray-400 border border-border bg-secondary  overflow-x-auto","children":["$","pre",null,{"className":"rounded-xl","children":["$","code",null,{"className":"text-sm p-1 rounded-lg ","children":"npm install react-query axios\n"}]}]}],"\n",["$","p",null,{"className":"text-base my-4 text-gray-400","children":"Navigate to your index.js file and paste the code below:"}],"\n",["$","div",null,{"className":"p-4 my-4 rounded-xl text-gray-400 border border-border bg-secondary  overflow-x-auto","children":["$","pre",null,{"className":"rounded-xl","children":["$","code",null,{"className":"text-sm p-1 rounded-lg ","children":"import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { QueryClient, QueryClientProvider } from \"react-query\";\r\n\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nconst queryClient = new QueryClient();\r\n\r\nReactDOM.render(\r\n  <QueryClientProvider client={queryClient}>\r\n    <App />\r\n  </QueryClientProvider>,\r\n  document.getElementById(\"root\")\r\n);\n"}]}]}],"\n",["$","p",null,{"className":"text-base my-4 text-gray-400","children":"With this, your application is set to go!"}],"\n",["$","h4",null,{"className":"md:text-xl text-xl font-bold my-3 text-gray-200","children":"What is React Query?"}],"\n",["$","p",null,{"className":"text-base my-4 text-gray-400","children":"Hey Google, what does refine.js do?"}],"\n",["$","p",null,{"className":"text-base my-4 text-gray-400","children":"At this point, you will wonder what exactly Google has got to do with React Query. React Query's core functionality revolves around fetching and caching data from an API and handling state management, while search engines like Google allow us to query and retrieve relevant information from an extensive database. Both React Query and Google aim to optimize data retrieval and improve user experiences."}],"\n",["$","p",null,{"className":"text-base my-4 text-gray-400","children":"The analogy between Google and React Query helps us understand how React Query works. When we query Google for information, it retrieves the best available information from its database. Similarly, React Query fetches data from an API endpoint like Google fetches information from its database."}],"\n",["$","p",null,{"className":"text-base my-4 text-gray-400","children":"React Query manages the state of this fetched data, similar to how Google handles the information it retrieves. React Query caches API responses, which stores the fetched data locally to reduce the need for subsequent fetches."}],"\n",["$","p",null,{"className":"text-base my-4 text-gray-400","children":"Likewise, search engines like Google cache web pages to reduce latency when displaying search results. This caching mechanism improves performance and reduces the time to display the requested information."}],"\n",["$","h4",null,{"className":"md:text-xl text-xl font-bold my-3 text-gray-200","children":"Querying Data"}],"\n",["$","p",null,{"className":"text-base my-4 text-gray-400","children":"This refers to the process of requesting specific information from a database or dataset using a query language. Queries are used to extract, filter, and manipulate data based on specific conditions and criteria."}],"\n",["$","p",null,{"className":"text-base my-4 text-gray-400","children":"By submitting a query, you can search for data that meets certain requirements. Now we see why there is a \"Query\" in \"React Query\" because this library is in charge of handling and making queries a breeze. Since we know what querying data means, let us perform basic data fetch with React Query."}],"\n",["$","h4",null,{"className":"md:text-xl text-xl font-bold my-3 text-gray-200","children":"Why use React Query?"}],"\n",["$","p",null,{"className":"text-base my-4 text-gray-400","children":"The dominance of React Query over traditional state management tools like useEffect and others is that React Query comes with built-in query caching, which means, once data is fetched, it can be stored in a cache and reused later without making redundant API calls."}],"\n",["$","p",null,{"className":"text-base my-4 text-gray-400","children":"React Query also handles the state management of queries automatically, reducing the need for developers to write and maintain complex state management logic. It provides built-in error-handling capabilities, allowing developers to handle API errors gracefully."}],"\n",["$","p",null,{"className":"text-base my-4 text-gray-400","children":"Since we now know why we should use React Query we can go further to know how to perform a basic data fetch with this library."}],"\n",["$","h5",null,{"className":"md:text-lg text-lg  font-bold my-2 text-gray-200","children":"Performing basic data fetching"}],"\n",["$","p",null,{"className":"text-base my-4 text-gray-400","children":"React Query has a way of handling server states, and it does that using the useQuery hook. This useQuery hook is used to fetch data from your API. It returns an object that contains the status of the query (loading, error, or success), the data returned from the query, and functions to refetch the data."}],"\n",["$","p",null,{"className":"text-base my-4 text-gray-400","children":"To see how this works we will be fetching a list of post titles from Jsonplaceholder API. Here's a basic example of how you might use React Query to fetch and manage server data:"}],"\n",["$","div",null,{"className":"p-4 my-4 rounded-xl text-gray-400 border border-border bg-secondary  overflow-x-auto","children":["$","pre",null,{"className":"rounded-xl","children":["$","code",null,{"className":"text-sm p-1 rounded-lg ","children":"import React from \"react\";\r\nimport { useQuery } from \"react-query\";\r\nimport axios from \"axios\";\r\n\r\nconst retrievePosts = async () => {\r\n  const response = await axios.get(\r\n    \"https://jsonplaceholder.typicode.com/posts\"\r\n  );\r\n  return response.data;\r\n};\r\n\r\nconst DisplayPosts = () => {\r\n  const {\r\n    data: posts,\r\n    error,\r\n    isLoading,\r\n  } = useQuery(\"postsData\", retrievePosts);\r\n\r\n  if (isLoading) return <div>Fetching posts...</div>;\r\n  if (error) return <div>An error occurred: {error.message}</div>;\r\n\r\n  return (\r\n    <ul>\r\n      {posts.map((post) => (\r\n        <li key={post.id}>{post.title}</li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default DisplayPosts;\n"}]}]}],"\n",["$","p",null,{"className":"text-base my-4 text-gray-400","children":"In this example, useQuery fetches the posts. The useQuery hook is used to fetch data and handle loading and error states. The retrievePosts function fetches the data using Axios. If data is loading or an error occurs, a message is displayed. Otherwise, the posts are rendered as a list."}],"\n",["$","p",null,{"className":"text-base my-4 text-gray-400","children":"We can also notice caching is handled by the useQuery hook. When you call useQuery and pass it a key (in this case, 'postsData') and a fetch function (retrievePosts), React Query performs the fetch and then stores the result in a cache."}],"\n",["$","p",null,{"className":"text-base my-4 text-gray-400","children":"The key you provide ('postsData') is used as the identifier for this cache. If useQuery is called again with the same key while the data is still in the cache, React Query will return the cached data instead of performing a new fetch."}],"\n",["$","p",null,{"className":"text-base my-4 text-gray-400","children":"When you run this on your browser you will get the list of post titles displayed."}],"\n",["$","h4",null,{"className":"md:text-xl text-xl font-bold my-3 text-gray-200","children":"Mutating Data"}],"\n",["$","p",null,{"className":"text-base my-4 text-gray-400","children":"Mutating data simply means we are changing something in the database, we could be posting, creating, or deleting something, whatever we choose to do we are still mutating."}],"\n",["$","p",null,{"className":"text-base my-4 text-gray-400","children":"This is what makes React Query a beautiful tool as it can be used to perform CRUD( Create, Read, Update, and Delete) operations. While the useQuery hook is used for \"read\" operations (fetching data), React Query provides the useMutation hook for \"write\" operations (creating, updating, and deleting data)."}],"\n",["$","p",null,{"className":"text-base my-4 text-gray-400","children":"Using the useMutation hook for CRUD operation we need to note that the Json placeholder API doesn't actually store the created, updated, or deleted data. But to be sure the operation were made, it will either return a success statement or an error statement."}],"\n",["$","p",null,{"className":"text-base my-4 text-gray-400","children":"Create To Create a post using useMutation. Create a component and name it CreatePost() then you can paste the code below:"}],"\n",["$","div",null,{"className":"p-4 my-4 rounded-xl text-gray-400 border border-border bg-secondary  overflow-x-auto","children":["$","pre",null,{"className":"rounded-xl","children":["$","code",null,{"className":"text-sm p-1 rounded-lg ","children":"$4"}]}]}],"\n",["$","p",null,{"className":"text-base my-4 text-gray-400","children":"In the code above, useMutation is used to post new data to the Json Placeholder API. The function passed to useMutation is the mutation function. When mutation.mutate is called with the new post data, the mutation is performed."}],"\n",["$","p",null,{"className":"text-base my-4 text-gray-400","children":"This is what it looks like in a Chrome browser:"}],"\n",["$","p",null,{"className":"text-base my-4 text-gray-400","children":["$","div",null,{"className":"border border-border p-2 bg-secondary rounded-xl my-4","children":["$","$L3",null,{"src":"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-07-04-react-query-intro/chrome-browser.png","alt":"Create Post","width":"$undefined","height":"$undefined","className":"rounded-xl"}]}]}],"\n",["$","p",null,{"className":"text-base my-4 text-gray-400","children":"After feeling the options, click submit and wait for the response:"}],"\n",["$","p",null,{"className":"text-base my-4 text-gray-400","children":["$","div",null,{"className":"border border-border p-2 bg-secondary rounded-xl my-4","children":["$","$L3",null,{"src":"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-07-04-react-query-intro/click-submit.png","alt":"Post Submitted","width":"$undefined","height":"$undefined","className":"rounded-xl"}]}]}],"\n",["$","p",null,{"className":"text-base my-4 text-gray-400","children":"####### Response:"}],"\n",["$","p",null,{"className":"text-base my-4 text-gray-400","children":["$","div",null,{"className":"border border-border p-2 bg-secondary rounded-xl my-4","children":["$","$L3",null,{"src":"https://refine.ams3.cdn.digitaloceanspaces.com/blog/2023-07-04-react-query-intro/response.png","alt":"Response","width":"$undefined","height":"$undefined","className":"rounded-xl"}]}]}],"\n",["$","p",null,{"className":"text-base my-4 text-gray-400","children":"Update We can go further to update posts. To do that, create a component named UpdatePost(), then paste the code below:"}],"\n",["$","div",null,{"className":"p-4 my-4 rounded-xl text-gray-400 border border-border bg-secondary  overflow-x-auto","children":["$","pre",null,{"className":"rounded-xl","children":["$","code",null,{"className":"text-sm p-1 rounded-lg ","children":"$5"}]}]}],"\n",["$","p",null,{"className":"text-base my-4 text-gray-400","children":"In this code, We changed the axios.post call in the useMutation hook to axios.put to make a PUT request instead of a POST request."}],"\n",["$","p",null,{"className":"text-base my-4 text-gray-400","children":"We have also changed the URL to include the ID of the post to update (\"https://jsonplaceholder.typicode.com/posts/1\"). The rest of the code stays the same, and with this, we were able to update a post."}],"\n",["$","p",null,{"className":"text-base my-4 text-gray-400","children":"Delete To be able to delete an already created post, a component named DeletePost() needs to be created. Fill free to copy the code below:"}],"\n",["$","div",null,{"className":"p-4 my-4 rounded-xl text-gray-400 border border-border bg-secondary  overflow-x-auto","children":["$","pre",null,{"className":"rounded-xl","children":["$","code",null,{"className":"text-sm p-1 rounded-lg ","children":"import React from \"react\";\r\nimport { useMutation } from \"react-query\";\r\nimport axios from \"axios\";\r\n\r\nconst DeletePost = () => {\r\n  const mutation = useMutation(() =>\r\n    axios.delete(\"https://jsonplaceholder.typicode.com/posts/1\")\r\n  );\r\n\r\n  const deleteData = () => {\r\n    mutation.mutate();\r\n  };\r\n\r\n  if (mutation.isLoading) {\r\n    return <span>Deleting...</span>;\r\n  }\r\n\r\n  if (mutation.isError) {\r\n    return <span>Error: {mutation.error.message}</span>;\r\n  }\r\n\r\n  if (mutation.isSuccess) {\r\n    return <span>Post deleted!</span>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={deleteData}>Delete Post</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DeletePost;\n"}]}]}],"\n",["$","p",null,{"className":"text-base my-4 text-gray-400","children":"In order to delete a post we changed the axios.post call in the useMutation hook to axios.delete to make a DELETE request instead of a POST request."}],"\n",["$","p",null,{"className":"text-base my-4 text-gray-400","children":"We also changed the URL to include the ID of the post to delete (\"https://jsonplaceholder.typicode.com/posts/1\")."}],"\n",["$","p",null,{"className":"text-base my-4 text-gray-400","children":"Following the steps above illustrates how best to use the useMutation hook and we can agree it makes the job much easier."}],"\n",["$","h4",null,{"className":"md:text-xl text-xl font-bold my-3 text-gray-200","children":"React Query and Frameworks"}],"\n",["$","p",null,{"className":"text-base my-4 text-gray-400","children":"React-based framework like refine has extended versions of the hooks provided by React Query. refine extends the functionality of React Query's hooks, adding extra features and customization options to better suit data-intensive applications. These hooks include useUpdate and useList."}],"\n",["$","p",null,{"className":"text-base my-4 text-gray-400","children":"The useUpdate hook in refine is an extended version of the useMutation hook from React Query. This hook is used when you want to update a record. It uses the update method as the mutation function from the dataProvider that is passed to refine."}],"\n",["$","p",null,{"className":"text-base my-4 text-gray-400","children":"On the other hand, the useList hook in refine is an extended version of the useQuery hook from React Query. It is used when you need to fetch data according to sort, filter, pagination, etc., from a resource."}],"\n",["$","p",null,{"className":"text-base my-4 text-gray-400","children":"If you are in search of a framework that utilizes the power React query has got, refine is an absolutely great choice as it solves issues concerning data querying and server state management complexity."}],"\n",["$","h4",null,{"className":"md:text-xl text-xl font-bold my-3 text-gray-200","children":"Conclusion"}],"\n",["$","p",null,{"className":"text-base my-4 text-gray-400","children":"In this beginner's guide, we explored the world of React Query and its core concepts. We learned that React Query is a powerful tool for handling data fetching, caching, and state management in React applications."}],"\n",["$","p",null,{"className":"text-base my-4 text-gray-400","children":"Frameworks like refine extend the capabilities of React Query, offering a comprehensive solution for data-intensive applications. By leveraging React Query, developers can enhance the efficiency and user experience of their React projects. Thank you for reading!"}]],null]]},["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","beginners-guide-to-react-query","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/cecdbce2880c059c.css","precedence":"next","crossOrigin":""}]]}]]},[null,["$","main",null,{"className":"max-w-5xl mx-auto p-4 animate_in","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]}],null]]},[null,["$","html",null,{"lang":"en","children":[["$","head",null,{"children":[["$","$L8",null,{"async":true,"src":"https://www.googletagmanager.com/gtag/js?id=G-4ZJDKZYQ78"}],["$","$L8",null,{"id":"google-analytics","children":"window.dataLayer = window.dataLayer || [];\n    function gtag(){dataLayer.push(arguments);}\n    gtag('js', new Date());\n  \n    gtag('config', 'G-4ZJDKZYQ78');"}]]}],["$","body",null,{"className":"__className_b1da2a","children":[["$","$L9",null,{"children":[["$","div",null,{"className":"background"}],["$","nav",null,{"className":"py-4 backdrop-blur-md sticky top-0 left-0 right-0 z-50","children":["$","div",null,{"className":" flex justify-between items-center max-w-5xl m-auto px-4","children":[["$","h1",null,{"className":"text-xl  font-bold relative  bg-clip-text text-transparent bg-gradient-to-b from-neutral-200 to-neutral-500","children":["$","$L2",null,{"href":"/","children":"OpenDevHub"}]}],["$","div",null,{"className":"flex items-center gap-4","children":[["$","$L2",null,{"href":"https://twitter.com/nikhil_nigamnik","children":["$","svg",null,{"stroke":"currentColor","fill":"currentColor","strokeWidth":"0","viewBox":"0 0 512 512","className":" w-8 h-8 p-1 text-gray-400 undefined","children":["$undefined",[["$","path","0",{"d":"M459.37 151.716c.325 4.548.325 9.097.325 13.645 0 138.72-105.583 298.558-298.558 298.558-59.452 0-114.68-17.219-161.137-47.106 8.447.974 16.568 1.299 25.34 1.299 49.055 0 94.213-16.568 130.274-44.832-46.132-.975-84.792-31.188-98.112-72.772 6.498.974 12.995 1.624 19.818 1.624 9.421 0 18.843-1.3 27.614-3.573-48.081-9.747-84.143-51.98-84.143-102.985v-1.299c13.969 7.797 30.214 12.67 47.431 13.319-28.264-18.843-46.781-51.005-46.781-87.391 0-19.492 5.197-37.36 14.294-52.954 51.655 63.675 129.3 105.258 216.365 109.807-1.624-7.797-2.599-15.918-2.599-24.04 0-57.828 46.782-104.934 104.934-104.934 30.213 0 57.502 12.67 76.67 33.137 23.715-4.548 46.456-13.32 66.599-25.34-7.798 24.366-24.366 44.833-46.132 57.827 21.117-2.273 41.584-8.122 60.426-16.243-14.292 20.791-32.161 39.308-52.628 54.253z","children":[]}]]],"style":{"color":"$undefined"},"height":"1em","width":"1em","xmlns":"http://www.w3.org/2000/svg"}]}],["$","$L2",null,{"href":"https://github.com/nikhilnigamnik/open-dev-hub","children":["$","svg",null,{"stroke":"currentColor","fill":"currentColor","strokeWidth":"0","viewBox":"0 0 496 512","className":"rounded-full w-8 h-8 p-1 text-gray-400 undefined","children":["$undefined",[["$","path","0",{"d":"$a","children":[]}]]],"style":{"color":"$undefined"},"height":"1em","width":"1em","xmlns":"http://www.w3.org/2000/svg"}]}]]}]]}]}],["$","main",null,{"className":"mb-20","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$Lb","loadingStyles":[],"loadingScripts":[],"hasLoading":true,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","section",null,{"children":["$","div",null,{"className":"py-8 px-4 mx-auto max-w-screen-xl h-[60vh] lg:py-16 lg:px-6","children":["$","div",null,{"className":"mx-auto max-w-screen-sm text-center","children":[["$","h1",null,{"className":"mb-4 text-7xl tracking-tight font-extrabold lg:text-9xl text-gradient","children":"404"}],["$","p",null,{"className":"mb-4 text-3xl tracking-tight font-bold text-gray-400 md:text-4xl ","children":"Something's missing."}],["$","p",null,{"className":"mb-4 text-sm font-light text-gray-500 dark:text-gray-400","children":["Sorry, we can't find that page. You'll find lots to explore on the home page."," "]}],["$","button",null,{"type":"$undefined","className":"relative inline-flex h-fit w-fit rounded-full border border-blue-100/20 bg-blue-200/10 text-slate-200 outline-none ring-yellow-300/40 transition-colors after:absolute after:inset-0 after:-z-10 after:animate-pulse after:rounded-full after:bg-yellow-100 after:bg-opacity-0 after:blur-md after:transition-all after:duration-500 hover:border-yellow-200/40 hover:text-yellow-300 after:hover:bg-opacity-15 focus:ring-2 px-8 py-1","children":["$","$L2",null,{"href":"/","children":"Back to Homepage"}]}]]}]}]}],"notFoundStyles":[],"styles":null}]}],["$","$Lc",null,{}]]}],["$","$Ld",null,{}],["$","$Le",null,{}],["$","$Lf",null,{}]]}]]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/1ee9b6c019b63923.css","precedence":"next","crossOrigin":""}]],"$L10"]]]]
b:["$","section",null,{"className":"max-w-5xl mx-auto p-4 flex flex-col gap-4","children":[["$","div",null,{"className":"animate-pulse bg-secondary w-full h-40 rounded-xl"}],[["$","div",null,{"className":"animate-pulse bg-secondary w-full h-10 rounded-xl"}],["$","div",null,{"className":"animate-pulse bg-secondary w-full h-10 rounded-xl"}],["$","div",null,{"className":"animate-pulse bg-secondary w-full h-10 rounded-xl"}],["$","div",null,{"className":"animate-pulse bg-secondary w-full h-10 rounded-xl"}],["$","div",null,{"className":"animate-pulse bg-secondary w-full h-10 rounded-xl"}]]]}]
10:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"OpenDevHub"}],["$","meta","3",{"name":"description","content":"OpenDevHub is a platform for open source projects."}],["$","link","4",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
1:null
